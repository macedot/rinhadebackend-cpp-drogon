version: "3.7"

services:
  api1: &api # API - Instância 01
    # image: lucaswilliameufrasio/rinhadebackend-cpp-drogon
    build: .
    environment:
      - PORT=8080
      - DB_HOST=localhost
      - DB_PORT=5432
      - DB_NAME=fight
      - DB_USER=postgres
      - DB_PASSWORD=fight
      - DB_MAX_CONNECTIONS=75
      - NUM_THREADS=20
    depends_on:
      database:
        condition: service_healthy
    network_mode: host
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.4GB'

  api2: # API - Instância 02
    <<: *api
    environment:
      - PORT=8081
      - DB_HOST=localhost
      - DB_PORT=5432
      - DB_NAME=fight
      - DB_USER=postgres
      - DB_PASSWORD=fight
      - DB_MAX_CONNECTIONS=75
      - NUM_THREADS=20
    depends_on:
      - api1


  nginx: # Load Balancer
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.4GB'

  database:
    image: postgres:alpine
    environment:
      - POSTGRES_PASSWORD=fight
      - POSTGRES_DB=fight
    volumes:
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/database/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    network_mode: host
    tmpfs:
      - /run
    healthcheck:
      test: [ "CMD-SHELL", "[ -r /var/run/postgresql/ready ] || ( pg_isready && touch /var/run/postgresql/ready)" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.85'
          memory: '1.8GB'
